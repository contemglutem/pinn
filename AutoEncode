import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Flatten, Reshape
from tensorflow.keras.datasets import mnist

# Load data
(x_train, _), (x_test, _) = mnist.load_data()
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
x_train = x_train[..., np.newaxis]
x_test = x_test[..., np.newaxis]

# Encoder
encoder_input = tf.keras.Input(shape=(28, 28, 1))
x = Flatten()(encoder_input)
encoded = Dense(64, activation='relu')(x)

# Decoder
decoded = Dense(784, activation='sigmoid')(encoded)
decoder_output = Reshape((28, 28, 1))(decoded)

# Autoencoder
autoencoder = Model(encoder_input, decoder_output)
autoencoder.compile(optimizer='adam', loss='binary_crossentropy')

# Display the model architecture
autoencoder.summary()

# Train the model
autoencoder.fit(x_train, x_train, epochs=50, batch_size=256, shuffle=True, validation_data=(x_test, x_test))

# Use Encoder to reduce dimensionality
encoder = Model(encoder_input, encoded)
encoded_imgs = encoder.predict(x_test)

# Use Decoder to reconstruct images
decoder_input = tf.keras.Input(shape=(64,))
reconstructor = autoencoder.layers[-2](decoder_input)
reconstructor = autoencoder.layers[-1](reconstructor)
decoder = Model(decoder_input, reconstructor)
decoded_imgs = decoder.predict(encoded_imgs)

# Plotting original and reconstructed images
n = 10  # Number of digits to display
plt.figure(figsize=(20, 4))
for i in range(n):
    # Display original
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(x_test[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # Display reconstruction
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_imgs[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()
